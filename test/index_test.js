// Generated by CoffeeScript 1.8.0
(function() {
  var Path, Robot, TextMessage;

  Path = require('path');

  Robot = require('hubot/src/robot');

  TextMessage = require('hubot/src/message').TextMessage;

  describe('Vault', function() {
    var adapter, robot, user;
    user = robot = adapter = null;
    beforeEach(function(done) {
      robot = new Robot(null, 'mock-adapter', true, 'Hubot');
      robot.adapter.on('connected', function() {
        var userInfo;
        process.env.HUBOT_DEPLOY_RANDOM_REPLY = 'sup-dude';
        process.env.HUBOT_FERNET_SECRETS = 'HTGbOk8U268J1reVKd3USe9brjsKguT8Bn1D83PSyGQ=';
        require('../index')(robot);
        userInfo = {
          name: 'ys',
          room: '#zf-promo'
        };
        user = robot.brain.userForId('1', userInfo);
        adapter = robot.adapter;
        return done();
      });
      return robot.run();
    });
    afterEach(function() {
      robot.server.close();
      return robot.shutdown();
    });
    it('Changes internal value', function() {
      var vault;
      vault = robot.vault.forUser(user);
      assert.notProperty(vault.vault, 'LOL');
      vault.set('LOL', 'TRUE');
      assert.property(vault.vault, 'LOL');
      assert.isNotNull(vault.vault, 'LOL');
      return assert.notEqual(vault.vault['LOL'], 'TRUE');
    });
    it('Stores encrypted data', function() {
      var vault;
      vault = robot.vault.forUser(user);
      vault.set('LOL', 'TRUE');
      return assert.equal(vault.get('LOL'), 'TRUE');
    });
    it('Stores encrypted objects', function() {
      var obj, vault;
      vault = robot.vault.forUser(user);
      obj = {
        'true': 'object'
      };
      vault.set('LOL', obj);
      return assert.deepEqual(vault.get('LOL'), obj);
    });
    it('Unset keys', function() {
      var vault;
      vault = robot.vault.forUser(user);
      vault.set('LOL', 'TRUE');
      assert.property(vault.vault, 'LOL');
      vault.unset('LOL');
      return assert.notProperty(vault.vault, 'LOL');
    });
    it('supports multiple secrets', function() {
      var vault;
      vault = robot.vault.forUser(user);
      vault.set('LOL', 'TRUE');
      process.env.HUBOT_FERNET_SECRETS = '09E5+pgDBnL7sWDQ+GsQpEWpp8869hTC6r1a361V5i8=,HTGbOk8U268J1reVKd3USe9brjsKguT8Bn1D83PSyGQ=';
      vault = robot.vault.forUser(user);
      return assert.equal(vault.get('LOL'), 'TRUE');
    });
    return it('fails when none of the secrets match the one encoded with', function() {
      var vault;
      vault = robot.vault.forUser(user);
      vault.set('LOL', 'TRUE');
      process.env.HUBOT_FERNET_SECRETS = '+yFKliFBGgxlf1nHov8h6HkC/qc/7S02G6wleFu2etI=';
      vault = robot.vault.forUser(user);
      return assert["null"](vault.get('LOL'));
    });
  });

}).call(this);
